{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","preventDefault","wynik","liczba1","parseInt","refs","value","liczba2","operator","setState","state","bind","assertThisInitialized","react_default","a","createElement","className","src","logo","alt","onSubmit","htmlFor","type","ref","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uPCoFzBC,qBA9Eb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAUFI,aAAe,SAAAC,GACbA,EAAEC,iBACF,IAIIC,EAJAC,EAAUC,SAASZ,EAAKa,KAAKF,QAAQG,OACrCC,EAAUH,SAASZ,EAAKa,KAAKE,QAAQD,OACrCE,EAAWhB,EAAKa,KAAKG,SAASF,MAIlC,OAAQE,GACN,IAAK,IACHN,EAAQC,EAAUI,EAClB,MACF,IAAK,IACHL,EAAQC,EAAUI,EAClB,MACF,IAAK,IACHL,EAAQC,EAAUI,EAClB,MACF,IAAK,IACHL,EAAQC,EAAUI,EAItBf,EAAKiB,SAAS,CACZN,QAASA,EACTI,QAASA,EACTC,SAAUA,EACVN,MAAOA,KApCTV,EAAKkB,MAAQ,CACXP,QAAS,GACTI,QAAS,GACTC,SAAU,GACVN,MAAO,IAETV,EAAKO,aAAaY,KAAlBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KARYA,wEA2CZ,OACEqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMK,SAAUzB,KAAKI,cACnBc,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOM,QAAQ,IAAf,cACAR,EAAAC,EAAAC,cAAA,SAAOO,KAAK,OAAOC,IAAI,aAEzBV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACbH,EAAAC,EAAAC,cAAA,SAAOM,QAAQ,IAAf,cACAR,EAAAC,EAAAC,cAAA,SAAOO,KAAK,OAAOC,IAAI,aAEzBV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACbH,EAAAC,EAAAC,cAAA,SAAOM,QAAQ,IAAf,gBACAR,EAAAC,EAAAC,cAAA,UAAQQ,IAAI,YACVV,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,qBAGJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,0BAGJF,EAAAC,EAAAC,cAAA,UAAKpB,KAAKe,MAAMR,iBAxEVsB,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,KAAK,SAAAC,GACJA,EAAaC,eAEdC,MAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME","file":"static/js/main.9d40a9b7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.8386fb60.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      liczba1: \"\",\n      liczba2: \"\",\n      operator: \"\",\n      wynik: \"\"\n    };\n    this.handleSubmit.bind(this);\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    let liczba1 = parseInt(this.refs.liczba1.value);\n    let liczba2 = parseInt(this.refs.liczba2.value);\n    let operator = this.refs.operator.value;\n\n    let wynik;\n\n    switch (operator) {\n      case \"+\":\n        wynik = liczba1 + liczba2;\n        break;\n      case \"-\":\n        wynik = liczba1 - liczba2;\n        break;\n      case \"*\":\n        wynik = liczba1 * liczba2;\n        break;\n      case \"/\":\n        wynik = liczba1 / liczba2;\n        break;\n      default:\n    }\n    this.setState({\n      liczba1: liczba1,\n      liczba2: liczba2,\n      operator: operator,\n      wynik: wynik\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <div>\n            <form onSubmit={this.handleSubmit}>\n              <h1>Kalkulator</h1>\n              <div>\n                <label htmlFor=\"\">Liczba 1: </label>\n                <input type=\"text\" ref=\"liczba1\" />\n              </div>\n              <div className=\"\">\n                <label htmlFor=\"\">Liczba 2: </label>\n                <input type=\"text\" ref=\"liczba2\" />\n              </div>\n              <div className=\"\">\n                <label htmlFor=\"\">Zanki Math: </label>\n                <select ref=\"operator\">\n                  <option>+</option>\n                  <option>-</option>\n                  <option>*</option>\n                  <option>/</option>\n                </select>\n              </div>\n              <div className=\"form-grup\">\n                <button>Policz</button>\n              </div>\n            </form>\n            <h1>{this.state.wynik}</h1>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}